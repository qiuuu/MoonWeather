package com.pangge.moontest;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WEATHER1".
*/
public class Weather1Dao extends AbstractDao<Weather1, Long> {

    public static final String TABLENAME = "WEATHER1";

    /**
     * Properties of entity Weather1.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Date = new Property(1, String.class, "date", false, "DATE");
        public final static Property Type = new Property(2, String.class, "type", false, "TYPE");
        public final static Property High = new Property(3, String.class, "high", false, "HIGH");
        public final static Property Low = new Property(4, String.class, "low", false, "LOW");
        public final static Property Fengxiang = new Property(5, String.class, "fengxiang", false, "FENGXIANG");
        public final static Property Fengli = new Property(6, String.class, "fengli", false, "FENGLI");
        public final static Property City = new Property(7, String.class, "city", false, "CITY");
        public final static Property Wendu = new Property(8, String.class, "wendu", false, "WENDU");
        public final static Property Ganmao = new Property(9, String.class, "ganmao", false, "GANMAO");
    }


    public Weather1Dao(DaoConfig config) {
        super(config);
    }
    
    public Weather1Dao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WEATHER1\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"DATE\" TEXT," + // 1: date
                "\"TYPE\" TEXT," + // 2: type
                "\"HIGH\" TEXT," + // 3: high
                "\"LOW\" TEXT," + // 4: low
                "\"FENGXIANG\" TEXT," + // 5: fengxiang
                "\"FENGLI\" TEXT," + // 6: fengli
                "\"CITY\" TEXT," + // 7: city
                "\"WENDU\" TEXT," + // 8: wendu
                "\"GANMAO\" TEXT);"); // 9: ganmao
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WEATHER1\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Weather1 entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(2, date);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
 
        String high = entity.getHigh();
        if (high != null) {
            stmt.bindString(4, high);
        }
 
        String low = entity.getLow();
        if (low != null) {
            stmt.bindString(5, low);
        }
 
        String fengxiang = entity.getFengxiang();
        if (fengxiang != null) {
            stmt.bindString(6, fengxiang);
        }
 
        String fengli = entity.getFengli();
        if (fengli != null) {
            stmt.bindString(7, fengli);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(8, city);
        }
 
        String wendu = entity.getWendu();
        if (wendu != null) {
            stmt.bindString(9, wendu);
        }
 
        String ganmao = entity.getGanmao();
        if (ganmao != null) {
            stmt.bindString(10, ganmao);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Weather1 entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(2, date);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
 
        String high = entity.getHigh();
        if (high != null) {
            stmt.bindString(4, high);
        }
 
        String low = entity.getLow();
        if (low != null) {
            stmt.bindString(5, low);
        }
 
        String fengxiang = entity.getFengxiang();
        if (fengxiang != null) {
            stmt.bindString(6, fengxiang);
        }
 
        String fengli = entity.getFengli();
        if (fengli != null) {
            stmt.bindString(7, fengli);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(8, city);
        }
 
        String wendu = entity.getWendu();
        if (wendu != null) {
            stmt.bindString(9, wendu);
        }
 
        String ganmao = entity.getGanmao();
        if (ganmao != null) {
            stmt.bindString(10, ganmao);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Weather1 readEntity(Cursor cursor, int offset) {
        Weather1 entity = new Weather1( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // date
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // high
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // low
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // fengxiang
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // fengli
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // city
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // wendu
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // ganmao
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Weather1 entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDate(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHigh(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLow(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFengxiang(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFengli(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCity(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setWendu(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setGanmao(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Weather1 entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Weather1 entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Weather1 entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
